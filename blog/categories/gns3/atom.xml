<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gns3 | The Open Network Geek Blog]]></title>
  <link href="http://opennetgeek.github.io/blog/categories/gns3/atom.xml" rel="self"/>
  <link href="http://opennetgeek.github.io/"/>
  <updated>2016-05-18T19:29:21-06:00</updated>
  <id>http://opennetgeek.github.io/</id>
  <author>
    <name><![CDATA[Diego Dompe]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using OpenSwitch Appliance With GNS3]]></title>
    <link href="http://opennetgeek.github.io/blog/2016/04/20/using-openswitch-appliance-with-gns3/"/>
    <updated>2016-04-20T18:52:32-06:00</updated>
    <id>http://opennetgeek.github.io/blog/2016/04/20/using-openswitch-appliance-with-gns3</id>
    <content type="html"><![CDATA[<p><img class="center no-border" src="/images/openswitchstencilbig1.png"></p>

<p><strong>Note</strong>: This article was <a href="https://opennetgeek.wordpress.com/2016/04/20/using-openswitch-appliance-with-gns3/">originally published here</a>.</p>

<p><strong>Update:</strong>This post has been updated to account for some recent changes
in the appliance configuration (support for up to 7 front ports). In
my <a href="http://opennetgeek.github.io/blog/2016/04/19/developing-openswitch-with-linux-vm-slash-os-x-host/">previous
post</a> I
described my developer setup to work with OpenSwitch. At the end of my
post I showed how to download the build system, and configure and build
an &lsquo;appliance&rsquo; image.</p>

<h2>What Is An OpenSwitch Appliance?</h2>

<p>The appliance is a virtual machine image (in OVA format) that could be
run on VirtualBox or VMware (on this articule I will focus on
VirtualBox) and provides a software datapath (based in OVS right now,
but P4 support it&rsquo;s landing soon). All the rest of the OpenSwitch stack
is the same that you will see in a real hardware, and obviously the
software datapath has certain limitations and features not implemented.</p>

<p>Despite his limitations, the appliance is a really nice way to get your
hands into OpenSwitch without having real hardware.</p>

<p>If you are using the development environment, you can find the appliance .ova file on the
images directory after completing the build, but otherwise you can also
download a periodic image from the <a href="https://archive.openswitch.net/artifacts/periodic/master/latest/appliance/">project
archives</a> (keep
in mind this is a developer snapshot, so things may be broken or
uncomplete sometimes).</p>

<p>The Appliance has currently <del>4</del> <a href="https://review.openswitch.net/#/c/7859/">8</a>
network ports (this is the max number of interfaces supported by VirtualBox): eth0 to eth7. The
port &lsquo;eth0&rsquo; will be the management port, and the other ones are &lsquo;front
ports&rsquo;.</p>

<h2>How To Use The Appliance?</h2>

<!--more-->


<p>The first good use for the appliance is that you can import it into
VirtualBox, and by using &lsquo;bridged&rsquo; interface with a dedicated NIC (for
example an USB ethernet dongle), you can make the appliance talk with a
real piece of hardware, like a traditional router. This allows you to
play with LLDP, BGP, OSPF, etc. I won&rsquo;t go into details of a setup like
this for this article, and is left as exercise to the reader.</p>

<p>In the previous scenario, using one Appliance was nice, but how about using
multiple appliances together? Like creating a virtual CLOS? For that we
will be using GNS3.</p>

<p>If you never heard of <a href="https://www.gns3.com">GNS3</a> before, is an Open Source platform to
create virtual networks and deployments inside your laptop, with some
nice UI. Even more useful, it&rsquo;s cross platform. I will be focusing my
demo here on using it over Mac, but should be easy to extrapolate if you
are a Windows user.</p>

<h2>Setup OpenSwitch Appliance On VirtualBox for GNS3</h2>

<p>In order to use the appliance with GNS3, you need to import the OVA file
into VirtualBox (File -> Import Appliance). The OVA generated by
OpenSwitch is compatible out of the box with GNS3 since April 26th 2016.</p>

<h3><a name="install_and_configure">Installing And Configuring GNS3</a></h3>

<p>First, <a href="https://www.gns3.com/software/download">download GNS3</a> from
their project page and install it (yes, you have to register). Next, I
recommend that you <a href="https://www.wireshark.org/download.html">install
Wireshark</a> to have the
capabilities of snooping on the traffic of the virtual network.</p>

<p>On recent OS X, when trying to run the GNS3 application you may get an
error message:</p>

<pre><code>“GNS3” is damaged and can’t be opened
</code></pre>

<p>This is a wrong error message, and the problem is really that you need
to reduce the security of the system to allow executing applications
that are not from the App Store. You can change this setting on: System
Preferences -> Security &amp; Privacy -> Allow apps download from:
Anywhere.</p>

<p>When you first start GNS3, it will start the Setup Wizard, and
ask for a server. Select the &lsquo;Local server&rsquo;. We would not need the GNS3
VM for running the OpenSwitch appliance, since will be run on top of
VirtualBox.</p>

<p><img class="center no-border" src="/images/gns3-setup-1.png"></p>

<p>On the next window select to &lsquo;Add a VirtualBox virtual machine&rsquo; (at this
point you should have already imported the OpenSwitch Appliance into
VirtualBox for this to work).</p>

<p><img class="center no-border" src="/images/gns3-setup-2.png"></p>

<p>Next, select the OpenSwitch Appliance Image that was imported into
VirtualBox, and enable &ldquo;Use as linked base VM&rdquo;.</p>

<p><img class="center no-border" src="/images/ops-setup-1.png"></p>

<p>After of click on &lsquo;Finish&rsquo;, the preference panel for VirtualBox VMs will
show and you will have to edit the recently created template to add some
custom configuration: On the &lsquo;General Settings&rsquo; tab:</p>

<ul>
<li>Template Name: <em>OpenSwitch</em></li>
<li>Default name format: <em>{name}-{0}</em></li>
<li>Symbol: <em>/local/path/to/<a href="https://archive.openswitch.net/logo/OpenSwitchStencil.png">OpenSwitchStencil.png</a></em></li>
<li>Category: <em>Switches</em></li>
<li>RAM: <em>512 MB</em></li>
<li>☑︎ Enable remote console</li>
<li>☐ Enable ACPI shutdown</li>
<li>☑︎ Start VM in headless mode</li>
<li>☑︎ Use as a linked base VM</li>
</ul>


<p><img class="center no-border" src="/images/ops-setup-2.png"></p>

<p>On the &lsquo;Network&rsquo; tab:</p>

<ul>
<li>Adapters: <em>8</em></li>
<li>First port name: <em>mgmt</em></li>
<li>Name format: <em>eth{port1}</em></li>
<li>Segment size: <em>0</em></li>
<li>Type: <em>PCNet-FAST III (Am79c973)</em></li>
<li>☑︎ Allow GNS3 to use any configured VirtualBox adapter</li>
</ul>


<p><img class="center no-border" src="/images/ops-setup-3.png"></p>

<h2>Creating A Simple Connection Between Two Appliance Instances</h2>

<p>Now, it&rsquo;s time to deploy two instances and verify connectivity between
them:</p>

<ul>
<li>Create a new project and save it (the linked VM won&rsquo;t work on
temporal projects).</li>
<li>Click on the &lsquo;Browse all devices&rsquo; button on the left panel to show
the available devices, then drag two OpenSwitch instances into the
canvas (you can see in your VirtualBox UI that two new virtual
machines are created).</li>
<li>Use the &lsquo;Add link&rsquo; tool from the left panel (the one that looks like
a cable with an RJ45 plug) to connect the two instances over the
eth1 port of both.</li>
</ul>


<p>At the end of this setup your project should look like this:</p>

<p><img class="center no-border" src="/images/project-1.png"></p>

<p>Before starting the simulation, I will attach wireshark to one of the
interfaces to see the packets between the machines:</p>

<ul>
<li>Right click on one of side of the links and select &lsquo;Start capture&rsquo;.
This will create a pipe that will output the contents into a pcap
file that wireshark can feed from. This can only be done when the
link is down, so you need to start the captures before turning on
the VM.</li>
</ul>


<p>Now you can start your machines by hitting the top &lsquo;Play&rsquo; button. This
will start both VMs. Then you can double click on both machines and a
Terminal will open where you get access to the serial console of the
machine. You can login with the user and password &lsquo;netop&rsquo; (this will
enter into the traditional CLI mode, but you can also login as root into
a bash shell):</p>

<p><img class="center no-border" src="/images/console-1.png"></p>

<p>At this point you can right click on the link where we are capturing the
traffic, and select &lsquo;Start Wireshark&rsquo;. This will open a WireShark window
that is feeding from the pcap capture of the traffic from the port.</p>

<p><strong>Note</strong>: There is currently an open
<a href="https://tree.taiga.io/project/openswitch/issue/840">bug</a> in OpenSwitch
where the image may fail to boot properly the data path. To validate
your appliance booted properly run the following command:</p>

<pre><code># show interface eth1
</code></pre>

<p>If the reported MAC address is (null), then reboot the appliance and
check again. I will update this blog as soon as the bug is closed.</p>

<p>Now is time to see some traffic flowing between the machines: let&rsquo;s enable
LLDP on both ports, and we should be able to see both switches
identifying each other, and the traffic flowing thru Wireshark. Let&rsquo;s
issue the following commands on the CLI of both switches:</p>

<pre><code>switch# config
switch(config)# interface eth1
switch(config-if)# no shutdown
switch(config-if)# exit
switch(config)# lldp enable
switch(config)# exit
</code></pre>

<p>After these commands are entered on both switches, we can now show the
LLDP neighbor information on any of the switches:</p>

<pre><code>switch# show lldp neighbor-info eth1
Port                           : eth1
Neighbor entries               : 1
Neighbor entries deleted       : 0
Neighbor entries dropped       : 0
Neighbor entries age-out       : 0
Neighbor Chassis-Name          : switch
Neighbor Chassis-Description   : OpenSwitch 0.3.0 (dill) Linux 3.14.19-yocto-standard #1 SMP PREEMPT Wed Mar 23 00:06:21 UTC 2016 x86_64
Neighbor Chassis-ID            : a2:69:35:48:7b:4d
Neighbor Management-Address    : 
Chassis Capabilities Available : Bridge, Router
Chassis Capabilities Enabled   : Bridge, Router
Neighbor Port-ID               : eth1
TTL                            : 120
</code></pre>

<p>And you can see the LLDP advertisements going thru with Wireshark:</p>

<p><img class="center no-border" src="/images/wireshark.png"></p>

<h2>Conclusions And Next Steps</h2>

<p>That is all the fun that we will have for today, hope you find the
information useful. I&rsquo;m planing to blog soon about the following
subjects:</p>

<ul>
<li>A GNS3 setup of a CLOS network, and pushing the configuration using
Ansible (yay!).</li>
<li>Playing with an appliance using P4.</li>
</ul>


<p>Stay tuned!</p>
]]></content>
  </entry>
  
</feed>
