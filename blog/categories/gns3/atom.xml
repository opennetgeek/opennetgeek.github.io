<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gns3 | The Open Network Geek Blog]]></title>
  <link href="http://opennetgeek.github.io/blog/categories/gns3/atom.xml" rel="self"/>
  <link href="http://opennetgeek.github.io/"/>
  <updated>2016-06-26T04:07:54-06:00</updated>
  <id>http://opennetgeek.github.io/</id>
  <author>
    <name><![CDATA[Diego Dompe]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OpenSwitch Containers ♥ GNS3]]></title>
    <link href="http://opennetgeek.github.io/blog/2016/06/25/openswitch-containers-gns3/"/>
    <updated>2016-06-25T23:09:46-06:00</updated>
    <id>http://opennetgeek.github.io/blog/2016/06/25/openswitch-containers-gns3</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/OpenSwitchDocker.png" title="&lsquo;OpenSwitchDocker&rsquo; &lsquo;OpenSwitchDocker&rsquo;" ></p>

<p><div class="toc"/></p>

<p>In one of my <a href="http://opennetgeek.github.io/blog/2016/05/05/setting-up-dc-fabric-simulation-with-openswitch-and-gns3/">previous articles</a>,
I elaborated on a setup to create DC fabric simulations with GNS3 and OpenSwitch.
I also promised to follow up with some post about using Ansible with it.</p>

<p>Well, I have been a bit distracted with some changes to the setup before moving into
the Ansible details (to say true, I got the Ansible article almost ready, but things
are moving so fast, that I keep rewriting it).</p>

<p>One of the things that &lsquo;change everything&rsquo; recently was the
<a href="https://www.gns3.com/news/article/what-s-new-in-gns3-v1-5">release of GNS3 1.5</a>.
This is a great release that includes several features that makes using OpenSwitch with GNS3 awesome:</p>

<ul>
<li>Support for Docker containers! This enables OpenSwitch to be a container instead of
a VM, allowing to scale better:

<ul>
<li>This obviously consumes less RAM memory and use it more efficiently.</li>
<li>We are no longer limited to 8 ports per node (VirtualBox&rsquo;s restriction), but
instead we can have as many ports as you want. Even more, the OpenSwitch Appliance
container will change the number of ports available, based on the GNS3 configuration.</li>
</ul>
</li>
<li>Support for portable projects! Now you can export your project and shared it
with others (restrictions apply).</li>
</ul>


<p>Let&rsquo;s see how to use this new release with OpenSwitch Appliance Container.</p>

<p><!--more--></p>

<h1>Using the GNS3 VM</h1>

<p>The first recommendation when using the container setup for GNS3, is to use the
GNS3 VM (even when using a native Linux host). Why?</p>

<ul>
<li>Well, for running containers on Linux or Windows, you need the GNS3 VM.
<div class="callout bottom-left">
Yeah, even if you have docker for Linux/Windows, GNS3 can create the virtual interfaces
for them on these platforms.
</div></li>
<li>Right now the only way to create a portable way to connect to the external world is to
use the <a href="https://www.gns3.com/marketplace/appliance/internet-for-gns3vm">GNS3 Internet VM Appliance</a>,
and this only works inside the GNS3 VM.</li>
<li>With GNS3 1.5, you can setup a remote GNS3 VM machine, allowing to deploy
a powerful VM for running your simulations without starving your laptop.</li>
<li>Also with the GNS3 VM, there is a simplified process for setting up a proxy when
working in a corporate environment.</li>
</ul>


<p>Since we will be using qemu appliances inside the GNS3 VM, you need a virtualization
platform that supports nested virtualization. That means you are either using a
VMware desktop solution (Workstation, Player or Fusion), or if using ESXi, be sure
to <a href="http://www.virtuallyghetto.com/2012/08/how-to-enable-nested-esxi-other.html">enable the VHV flag</a>.</p>

<h2>Installing the GNS3 VM</h2>

<p>Download the VM <a href="https://github.com/GNS3/gns3-gui/releases">from here</a>. Be sure to download the
right image for either desktop solution or ESXi.</p>

<p>You will need at least version 1.5.0, but if you are behind a corporate firewall, you will need version
1.5.1 that <a href="https://github.com/GNS3/gns3-vm/issues/75">fixes a bug when configuring the proxy settings</a>.</p>

<p>After downloading the GNS3 VM appliance, import it into your virtualization solution, and reconfigure
with this minimal hardware requirements:</p>

<ul>
<li>512MB of RAM for every OpenSwitch container that you plan to run. For our examples 6GB of RAM should be enough.</li>
<li>2 CPU cores. If you can afford more, the better.</li>
</ul>


<p>If you are behind a corporate firewall, be sure to turn on the VM, and using the menu displayed when the VM boots,
configure the proxy settings.</p>

<p><img class="center no-border" src="/images/gns3containers/proxy.png"></p>

<h2>Configure GNS3 to use the VM</h2>

<p>If you haven&rsquo;t already, install GNS3 downloading <a href="https://github.com/GNS3/gns3-gui/releases">from here</a>
(be sure to use the same version as the VM image that you downloaded).</p>

<p>When configuring GNS3, the wizard doesn&rsquo;t allow you to configure a remote server GNS3 VM, but
you can abort the wizard, and add it later from the preferences panel (the IP address of
the VM is show on the information page displayed by the VM on boot, or available from the
text menu on the VM as well).</p>

<p><div class="callout bottom-left">
I found that when working behind a proxy, the VM only works well as a remote server,
since somehow the communication with it cannot be established by the UI in the presense
of a proxy (I have only experienced this with <strike>OS-X</strike>macOS environment, not sure if
happens on Windows or Linux).
</div></p>

<p><img class="center no-border" src="/images/gns3containers/gns3vm-preferences.png"></p>

<h1>Using the OpenSwitch Docker Appliance with GNS3</h1>

<p>In order to use OpenSwitch as a container with GNS3, you have to main options:
use an existing image (easier one), or build a custom one from scratch (useful for developers).</p>

<h2>Using an Existing OpenSwitch Container Image</h2>

<p>Let&rsquo;s focus on the simple procedure first. Fortunately we no longer need to specify multiple
parameters on the UI to create a template, since for Docker containers we can use
a pre-defined template appliance (.gns3a file), that will do all the configuration
for you.</p>

<ul>
<li><p>First, download a GNS3 appliance template from the list
<a href="https://archive.openswitch.net/gns3/">available here</a>.</p></li>
<li><p>Next, import it into GNS3: there is a new &lsquo;Import appliance template&rsquo; button under
the device panel.</p>

<p><img class="center no-border" src="/images/gns3containers/import1.png"></p>

<p>Select &lsquo;Import an appliance template file&rsquo;</p>

<p><img class="center no-border" src="/images/gns3containers/import2.png"></p>

<p>Select the template that you downloaded, and follow the rest of the wizard. Select
to run on the remote server running the GNS3 VM.</p>

<p><img class="center no-border" src="/images/gns3containers/import3.png"></p></li>
</ul>


<p><img class="img-right-callout <a" src="href="https://archive.openswitch.net/logo/OpenSwitchDockerStencil.png">https://archive.openswitch.net/logo/OpenSwitchDockerStencil.png</a>"></p>

<p>Once you are done with the import, you can download a custom stencil for OpenSwitch
Docker Appliance <a href="https://archive.openswitch.net/logo/OpenSwitchDockerStencil.png">from here</a>,
and customize the template to use it.</p>

<p>The template uses by default 8 ports, but that can be adjusted in per machine instance.</p>

<p>That&rsquo;s all it takes, you are ready to drag &amp; drop container instances into GNS3!</p>

<h2>Creating a custom Container Image</h2>

<p>In the previous step where we used the .gns3a file, it points to a published version
of the container in the Docker Hub, but you may want to create your own container from
scratch with the latest code or modifications. If that is not the case, you can skip
this section.</p>

<p>First you will have to build an image for the appliance target as explained in
previous articles (you can also download the tarball for a periodic build from
the <a href="https://archive.openswitch.net/artifacts">artifact archives</a>).</p>

<p><div class="callout bottom-left">
An important clarification: if you are a developer from OpenSwitch, you may be used
to know the &lsquo;genericx86-64&rsquo; target as the container image used for testing purposes. However
on GNS3, we actually use the OpenSwitch Appliance images. This have implications on the
naming of the ports (ports are called ethX).
</div></p>

<p>Now, the default tarball created for the appliance is designed to run in a VM, so
it needs some small modifications to run properly on a container. I have automated
the steps in a <a href="https://github.com/ddompe/ops-gns3-docker/blob/master/openswitch/Dockerfile">docker file here</a>.</p>

<p>Here are the example commands to create a custom image with the latest code from
master and push into the docker hub (in this example I use my docker hub account):
<code>
mkdir ops-gns3-docker
curl https://archive.openswitch.net/artifacts/periodic/master/latest/appliance/openswitch-appliance-image-appliance-ops-0.4.0-master+2016063012.tar.gz &gt; openswitch-appliance-image.tar.gz
wget https://raw.githubusercontent.com/ddompe/ops-gns3-docker/master/openswitch/Dockerfile
docker build -t ddompe/openswitch-appliance:latest .
docker login
docker push ddompe/openswitch-appliance:latest
</code></p>

<p>Now you can modify the gns3a file provided in the previous step and point to your
customized image to import it into GNS3.</p>

<h1>Creating a topology for Ansible experimentation</h1>

<p>Now, let&rsquo;s create a topology for creating a DC Fabric simulation with Ansible similar
to the one described in the <a href="http://opennetgeek.github.io/blog/2016/05/05/setting-up-dc-fabric-simulation-with-openswitch-and-gns3/">previous article using virtual machine appliances</a>.</p>

<p>I have created a docker container that already automated all the steps detailed in
the previous article, and is suitable to be run as a systemd container. The Dockerfile
could be found <a href="https://github.com/ddompe/ops-gns3-docker/tree/master/dc-controller">here</a>, and
the GNS3 template file <a href="https://archive.openswitch.net/gns3/ansible-controller.gns3a">here</a>.</p>

<p>Unlike the previous examples using VirtualBox, we cannot longer use the cloud element
to get a NAT connection to the external world, so instead we will use the
<a href="https://www.gns3.com/marketplace/appliance/internet-for-gns3vm">GNS3 Internet VM Appliance</a>.</p>

<p>After installing those two templates, we can recreate the DC fabric similar to the one
from the previous article, with the difference that is (almost) all containers.</p>

<p><img class="center no-border" src="/images/gns3containers/topology.png"></p>

<h1>Sharing portable projects</h1>

<p>Now comes another cool part, you can export and import the project to share with
others.
<div class="callout bottom-left">
Yes, that means you can ignore everything I just said about importing templates
and drawing topologies and just download a file with everything ready.
I know I could have started saying this, but where is the fun if not in do it by
yourself?
</div></p>

<p>So, you can export the project by using &lsquo;Export portable project&rsquo; on the file
menu. It will ask you if you wan to include any base image, which for our example
I would recommend we do (this will pack the qemu image used by the GNS3 Internet Appliance).
Docker images won&rsquo;t get included on the file, but instead will be automatically
downloaded from the docker hub when someone imports the project.</p>

<p>Talking about importing the project back, there is currently a <a href="https://github.com/GNS3/gns3-gui/issues/1336">bug when importing
the project and downloading the docker images</a>,
where certain imports may timeout. This is fixed for 1.5.1, but in the meantime you can workaround by deleting the
project that failed to import and re-import it again (since the docker images should
be already downloaded, it won&rsquo;t fail the second time).</p>

<p>The portable project file for the example on this article is
<a href="https://archive.openswitch.net/gns3/dc-fabric-example.gns3project">here</a>, in case you
want to get up an running.</p>

<h1>Next Steps</h1>

<p>Isn&rsquo;t all of this really exciting? Thanks to the GNS3 team for their awesome work
and their responsiveness to fix the bug/enhancements that I keep throwing at them.</p>

<p>In the next article I will continue with explaining how to use Ansible to deploy
configuration to the topology we build here.</p>

<p>Stay tuned.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up DC Fabric Simulation With OpenSwitch and GNS3]]></title>
    <link href="http://opennetgeek.github.io/blog/2016/05/05/setting-up-dc-fabric-simulation-with-openswitch-and-gns3/"/>
    <updated>2016-05-05T19:31:32-06:00</updated>
    <id>http://opennetgeek.github.io/blog/2016/05/05/setting-up-dc-fabric-simulation-with-openswitch-and-gns3</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/google-datacenter-tech-03.jpg"></p>

<p><strong>Note</strong>: This article was <a href="https://opennetgeek.wordpress.com/2016/05/05/setting-up-dc-fabric-simulation-with-openswitch-and-gns3/">originally published here</a>.</p>

<p>In the <a href="http://opennetgeek.github.io/blog/2016/04/20/using-openswitch-appliance-with-gns3/">previous
post</a> I
covered the basics about setting up the OpenSwitch Appliance using GNS3.
The setup was fairly simple: two switches connected to each other and
exchanging LLDP packets. In this post we will setup a more elaborate
network to simulate a DC fabric (although it may be a bit <a href="https://kontrolissues.net/2015/03/27/sometimes-size-matters-im-sorry-but-youre-just-not-big-enough/">overkill of a
setup</a>).
The setup will be the basis for the next posts about configuring this
fabric using Ansible.</p>

<p>One of the first questions when setting up a complex topology with GNS3
that most people will do is: how do I connect
it to the external world outside of the simulation? For VirtualBox
machines that we are using, the options are limited. The one I found to
work reliably across platforms was to use a NAT connection. This has the
disadvantage that we have limited connectivity from the external world
toward the internal network, but this could be also a security advantage
to prevent accidental propagation of control protocols from our
simulated environment.</p>

<p>Since the purpose of this lab is going to be to play with Ansible, we are
going to need a Linux machine to run it. So, we will setup the following network:</p>

<p><img class="center no-border" src="/images/mgmt1.png"></p>

<p>Let&rsquo;s elaborate on the setup details:</p>

<!--more-->


<ul>
<li>The &lsquo;Internet&rsquo; cloud is a GNS3&rsquo;s cloud element, that I configured
with a NAT entry that I named &lsquo;nat&rsquo;. The name doesn&rsquo;t really matter,
as GNS3 just need to see a NAT interface on the cloud element, so
that the connection to the VM called &lsquo;ubuntu-netlab&rsquo; is configured
using VirtualBox&rsquo;s NAT networking.</li>
<li>The &lsquo;ubuntu-netlab&rsquo; is a virtual machine that have Ubuntu 16.04
Server installed on it (instructions about this setup below). This
VM will have two NICs: one attached to the NAT connection
and another one to the SW1 that will be the management network of
the switches. What we will be doing with this machine? Several
things:

<ul>
<li>Run a DHCP server to provide IP connectivity to the management
network</li>
<li>Run a DNS relay to minimize disruptions on the configuration (I
may be roaming between home/office).</li>
<li>You may optionally configure IP masquerading (aka NAT) on this
box to allow the OpenSwitch boxes to reach the external world,
but is not really required.
<div class="callout bottom-left">
You may be wondering why not connect the management switch
directly to the NAT port on the cloud element? I tried this, and
found the DHCP server shipping in VirtualBox was not really
good, and sometimes will assign the same IP address to different
boxes if restarted at a given time (bug with the leases?)
</div></li>
<li>We will install Ansible on this box, and use it as control
machine to configure the fabric</li>
</ul>
</li>
<li>The SW1 is a GNS3' ethernet switch with 8 ports. One will be
connected to the Ubuntu VM, and the other ports to each of the
management ports of the OpenSwitch boxes.</li>
<li>We will use 5 OpenSwitch boxes to create a simple datacenter fabric.
I&rsquo;m calling them spines/leaves for convenience, but I will do
examples with plain L2, and other L3 topologies that may not be a
CLOS.</li>
</ul>


<p>So, let&rsquo;s get started with the setup!</p>

<h2>Setup the Management Network</h2>

<p>You should start by dragging a cloud element and configuring it to have
a network interface of type NAT:</p>

<p><img class="center no-border" src="/images/cloud_nat.png"></p>

<p>Now we need to create the template for the Ubuntu VM that we will
connect to it.</p>

<h2>Configuring the GNS3 Template for the Ubuntu VM</h2>

<p>As I mention, we will be using an Ubuntu 16.04 (state of the art!)
Server VM. Don&rsquo;t worry, you won&rsquo;t have to install it. I have pre-package
it into a nice OVA (sorry tested only with VirtualBox, you may need to
do some work if want to use VMware). Download it from
<a href="https://archive.openswitch.net/demos/ubuntu-netlab.ova">here</a>.</p>

<h3>Importing the Image</h3>

<p>After downloading the OVA file, import it into VirtualBox, and then
proceed to create a template in GNS3 for the machine like we <a href="http://opennetgeek.github.io/blog/2016/04/20/using-openswitch-appliance-with-gns3/#install_and_configure">did for
OpenSwitch in the previous
post</a>.
Here is the summary of the steps and configuration:</p>

<ul>
<li>Preferences -> VirtualBox VMs -> New

<ul>
<li>Select the machine you just imported</li>
<li>☑︎ Use as linked base VM</li>
</ul>
</li>
<li>After created click on &lsquo;Edit&rsquo;

<ul>
<li>&lsquo;General settings&rsquo; tab:

<ul>
<li>Template Name: <em>ubuntu-netlab</em></li>
<li>Default name format: <em>{name}-{0}</em></li>
<li>Symbol: <em>:/symbols/vbox_guest.svg</em></li>
<li>Category: <em>End devices</em></li>
<li>RAM: <em>512 MB</em></li>
<li>☑︎ Enable remote console</li>
<li>☐ Enable ACPI shutdown</li>
<li>☑︎ Start VM in headless mode</li>
<li>☑︎ Use as a linked base VM</li>
</ul>
</li>
<li>&lsquo;Network&rsquo; tab:

<ul>
<li>Adapters: <em>2</em></li>
<li>First port name: <em>leave empty</em></li>
<li>Name format: <em>eth{0}</em></li>
<li>Segment size: 0</li>
<li>Type: <em>PCNet-FAST III (Am79c973)</em></li>
<li>☑︎ Allow GNS3 to use any configured VirtualBox adapter</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>Now you can drag an instance of it into your project and setup the
connections as detailed previously. This image is configured with serial
port console enabled, so after starting the VM, you can open the console
from GNS3 and get access. The default user/password is ubuntu/ubuntu.</p>

<div class="callout bottom-left">
Be sure to connect this VM to the NAT interface of the cloud element
first, so that it gets a DHCP response, otherwise it will be blocked
during the boot process until it times out, and you won't see any output
on the serial console. If you have doubt your setup is working, you can
disable the 'headless' setting on the machine and look at the VGA
console of the box.
</div>


<h2>Setting up the Ubuntu VM</h2>

<h3>Initial Setup</h3>

<p>Now that you have access to the console, let&rsquo;s do some initial setup.
First you may want to tell the serial terminal the size so that the
output is not messed up. In my case I just sized my console window to
120 columns and 35 lines (I use the OS X Terminal app, and the tittle
usually says the dimensions):</p>

<pre><code>stty cols 120 rows 35
</code></pre>

<p>Next we want to install the latest software updates for this image:</p>

<div class="callout top-left">
For the sake of simplicity I assume you are not behind a corporate
firewall, but if you do, you want to set the http_proxy and
http_proxy variables, and when invoking sudo, pass the -E parameter
to inherit these variables.
</div>


<pre><code>sudo apt update
sudo apt upgrade
</code></pre>

<h3>Network Setup</h3>

<p>Next, we want to configure the second network interface facing towards
SW1. You will have to run the ifconfig command to find the name of the
second interface:</p>

<pre><code>ifconfig -a
</code></pre>

<p>On this case my second interface is called enp0s8. I will then configure
the interface to an static IP address and bring the interface up:</p>

<pre><code>sudo su -
cat &lt;&lt;EOF &gt;&gt;/etc/network/interfaces

auto enp0s8
iface enp0s8 inet static
   address 192.168.1.1
   netmask 255.255.255.0

EOF
exit #leave sudo

sudo ifup enp0s8
</code></pre>

<h3>DHCP Server and DNS Relay</h3>

<p>Next we want to install the DHPC server and DNS relay (DNSmasq)</p>

<pre><code>sudo apt install isc-dhcp-server dnsmasq
</code></pre>

<p>Then proceed to configure the dhcp server modifying the file
<em>/etc/dhcp/dhcpd.conf</em> with your favorite editor (if you are not a <em>vim</em>
expert, the <em>nano</em> text editor could be easier). This are the contents
you will need:</p>

<pre><code>option domain-name "dc-lab";
option domain-name-servers 192.168.1.1;
subnet 192.168.1.0 netmask 255.255.255.0 {
  range 192.168.1.10 192.168.1.50;
  option routers 192.168.1.1;
}
</code></pre>

<p>Now you can start the server:</p>

<pre><code>systemctl start isc-dhcp-server
</code></pre>

<h3>IP Masquerading (NAT)</h3>

<p>If you want the OpenSwitch boxes to have access to the external
network over the management port, you may want to enable IP masquerading
on the box. Adjust the following script to the name of your network
interfaces:</p>

<pre><code>public_if=enp0s3
private_if=enp0s8
sudo -E iptables -t nat -A POSTROUTING -o $public_if -j MASQUERADE
sudo -E iptables -A FORWARD -i $public_if -o $private_if -m state --state RELATED,ESTABLISHED -j ACCEPT
sudo -E iptables -A FORWARD -i $private_if -o $public_if -j ACCEPT
sudo sysctl -w net.ipv4.ip_forward=1
</code></pre>

<h2>Setting up the Fabric Switches</h2>

<p>Now that we have the Cloud element and the Ubuntu VM, you need to drag
the GNS3 ethernet switch element to connect the second interface from
the Ubuntu VM with it, along with all the management ports of the
OpenSwitch instances. You can now proceed to power up the OpenSwitch
instances and login into their consoles (user/password is netop), and
verify the management interface got an IP address from our control VM:</p>

<pre><code>switch# show interface mgmt 
  Address Mode : dhcp
  IPv4 address/subnet-mask : 192.168.1.11/24
  Default gateway IPv4 : 192.168.1.1
  IPv6 address/prefix : 
  IPv6 link local address/prefix: fe80::a00:27ff:fe3a:efdd/64
  Default gateway IPv6 : 
  Primary Nameserver : 192.168.1.1
  Secondary Nameserver : 
switch#
</code></pre>

<div class="callout bottom-left">
Unfortunately OpenSwitch Simulator still has the <a href="https://tree.taiga.io/project/openswitch/issue/840">bug I mentioned
previously</a> and sometimes it may fail during initialization. If you stumble with this,
just restart the VM.
</div>


<p>You may also test login with user root (no password) into a bash shell
and the networking of the management domain should be able to reach the
external network.</p>

<h2>Next Steps</h2>

<p>Now that we have a management network up an running, we want to
configure the fabric to move packets around. At this point most
networking engineers will log into the CLI and start configuring, but we
went thru all this setup of a management network to do something more
interesting&hellip;</p>

<p>In our next post we will do this instead using Ansible,
which is a pretty good tool for managing
<a href="http://www.theregister.co.uk/2013/03/18/servers_pets_or_cattle_cern/">cattle</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using OpenSwitch Appliance With GNS3]]></title>
    <link href="http://opennetgeek.github.io/blog/2016/04/20/using-openswitch-appliance-with-gns3/"/>
    <updated>2016-04-20T18:52:32-06:00</updated>
    <id>http://opennetgeek.github.io/blog/2016/04/20/using-openswitch-appliance-with-gns3</id>
    <content type="html"><![CDATA[<p><img class="center no-border" src="/images/openswitchstencilbig1.png"></p>

<p><strong>Note</strong>: This article was <a href="https://opennetgeek.wordpress.com/2016/04/20/using-openswitch-appliance-with-gns3/">originally published here</a>.</p>

<p><strong>Update:</strong>This post has been updated to account for some recent changes
in the appliance configuration (support for up to 7 front ports). In
my <a href="http://opennetgeek.github.io/blog/2016/04/19/developing-openswitch-with-linux-vm-slash-os-x-host/">previous
post</a> I
described my developer setup to work with OpenSwitch. At the end of my
post I showed how to download the build system, and configure and build
an &lsquo;appliance&rsquo; image.</p>

<h2>What Is An OpenSwitch Appliance?</h2>

<p>The appliance is a virtual machine image (in OVA format) that could be
run on VirtualBox or VMware (on this articule I will focus on
VirtualBox) and provides a software datapath (based in OVS right now,
but P4 support it&rsquo;s landing soon). All the rest of the OpenSwitch stack
is the same that you will see in a real hardware, and obviously the
software datapath has certain limitations and features not implemented.</p>

<p>Despite his limitations, the appliance is a really nice way to get your
hands into OpenSwitch without having real hardware.</p>

<p>If you are using the development environment, you can find the appliance .ova file on the
images directory after completing the build, but otherwise you can also
download a periodic image from the <a href="https://archive.openswitch.net/artifacts/periodic/master/latest/appliance/">project
archives</a> (keep
in mind this is a developer snapshot, so things may be broken or
uncomplete sometimes).</p>

<p>The Appliance has currently <del>4</del> <a href="https://review.openswitch.net/#/c/7859/">8</a>
network ports (this is the max number of interfaces supported by VirtualBox): eth0 to eth7. The
port &lsquo;eth0&rsquo; will be the management port, and the other ones are &lsquo;front
ports&rsquo;.</p>

<h2>How To Use The Appliance?</h2>

<!--more-->


<p>The first good use for the appliance is that you can import it into
VirtualBox, and by using &lsquo;bridged&rsquo; interface with a dedicated NIC (for
example an USB ethernet dongle), you can make the appliance talk with a
real piece of hardware, like a traditional router. This allows you to
play with LLDP, BGP, OSPF, etc. I won&rsquo;t go into details of a setup like
this for this article, and is left as exercise to the reader.</p>

<p>In the previous scenario, using one Appliance was nice, but how about using
multiple appliances together? Like creating a virtual CLOS? For that we
will be using GNS3.</p>

<p>If you never heard of <a href="https://www.gns3.com">GNS3</a> before, is an Open Source platform to
create virtual networks and deployments inside your laptop, with some
nice UI. Even more useful, it&rsquo;s cross platform. I will be focusing my
demo here on using it over Mac, but should be easy to extrapolate if you
are a Windows user.</p>

<h2>Setup OpenSwitch Appliance On VirtualBox for GNS3</h2>

<p>In order to use the appliance with GNS3, you need to import the OVA file
into VirtualBox (File -> Import Appliance). The OVA generated by
OpenSwitch is compatible out of the box with GNS3 since April 26th 2016.</p>

<h3><a name="install_and_configure">Installing And Configuring GNS3</a></h3>

<p>First, <a href="https://www.gns3.com/software/download">download GNS3</a> from
their project page and install it (yes, you have to register). Next, I
recommend that you <a href="https://www.wireshark.org/download.html">install
Wireshark</a> to have the
capabilities of snooping on the traffic of the virtual network.</p>

<p>On recent OS X, when trying to run the GNS3 application you may get an
error message:</p>

<pre><code>“GNS3” is damaged and can’t be opened
</code></pre>

<p>This is a wrong error message, and the problem is really that you need
to reduce the security of the system to allow executing applications
that are not from the App Store. You can change this setting on: System
Preferences -> Security &amp; Privacy -> Allow apps download from:
Anywhere.</p>

<p>When you first start GNS3, it will start the Setup Wizard, and
ask for a server. Select the &lsquo;Local server&rsquo;. We would not need the GNS3
VM for running the OpenSwitch appliance, since will be run on top of
VirtualBox.</p>

<p><img class="center no-border" src="/images/gns3-setup-1.png"></p>

<p>On the next window select to &lsquo;Add a VirtualBox virtual machine&rsquo; (at this
point you should have already imported the OpenSwitch Appliance into
VirtualBox for this to work).</p>

<p><img class="center no-border" src="/images/gns3-setup-2.png"></p>

<p>Next, select the OpenSwitch Appliance Image that was imported into
VirtualBox, and enable &ldquo;Use as linked base VM&rdquo;.</p>

<p><img class="center no-border" src="/images/ops-setup-1.png"></p>

<p>After of click on &lsquo;Finish&rsquo;, the preference panel for VirtualBox VMs will
show and you will have to edit the recently created template to add some
custom configuration: On the &lsquo;General Settings&rsquo; tab:</p>

<ul>
<li>Template Name: <em>OpenSwitch</em></li>
<li>Default name format: <em>{name}-{0}</em></li>
<li>Symbol: <em>/local/path/to/<a href="https://archive.openswitch.net/logo/OpenSwitchStencil.png">OpenSwitchStencil.png</a></em></li>
<li>Category: <em>Switches</em></li>
<li>RAM: <em>512 MB</em></li>
<li>☑︎ Enable remote console</li>
<li>☐ Enable ACPI shutdown</li>
<li>☑︎ Start VM in headless mode</li>
<li>☑︎ Use as a linked base VM</li>
</ul>


<p><img class="center no-border" src="/images/ops-setup-2.png"></p>

<p>On the &lsquo;Network&rsquo; tab:</p>

<ul>
<li>Adapters: <em>8</em></li>
<li>First port name: <em>mgmt</em></li>
<li>Name format: <em>eth{port1}</em></li>
<li>Segment size: <em>0</em></li>
<li>Type: <em>PCNet-FAST III (Am79c973)</em></li>
<li>☑︎ Allow GNS3 to use any configured VirtualBox adapter</li>
</ul>


<p><img class="center no-border" src="/images/ops-setup-3.png"></p>

<h2>Creating A Simple Connection Between Two Appliance Instances</h2>

<p>Now, it&rsquo;s time to deploy two instances and verify connectivity between
them:</p>

<ul>
<li>Create a new project and save it (the linked VM won&rsquo;t work on
temporal projects).</li>
<li>Click on the &lsquo;Browse all devices&rsquo; button on the left panel to show
the available devices, then drag two OpenSwitch instances into the
canvas (you can see in your VirtualBox UI that two new virtual
machines are created).</li>
<li>Use the &lsquo;Add link&rsquo; tool from the left panel (the one that looks like
a cable with an RJ45 plug) to connect the two instances over the
eth1 port of both.</li>
</ul>


<p>At the end of this setup your project should look like this:</p>

<p><img class="center no-border" src="/images/project-1.png"></p>

<p>Before starting the simulation, I will attach wireshark to one of the
interfaces to see the packets between the machines:</p>

<ul>
<li>Right click on one of side of the links and select &lsquo;Start capture&rsquo;.
This will create a pipe that will output the contents into a pcap
file that wireshark can feed from. This can only be done when the
link is down, so you need to start the captures before turning on
the VM.</li>
</ul>


<p>Now you can start your machines by hitting the top &lsquo;Play&rsquo; button. This
will start both VMs. Then you can double click on both machines and a
Terminal will open where you get access to the serial console of the
machine. You can login with the user and password &lsquo;netop&rsquo; (this will
enter into the traditional CLI mode, but you can also login as root into
a bash shell):</p>

<p><img class="center no-border" src="/images/console-1.png"></p>

<p>At this point you can right click on the link where we are capturing the
traffic, and select &lsquo;Start Wireshark&rsquo;. This will open a WireShark window
that is feeding from the pcap capture of the traffic from the port.</p>

<p><strong>Note</strong>: There is currently an open
<a href="https://tree.taiga.io/project/openswitch/issue/840">bug</a> in OpenSwitch
where the image may fail to boot properly the data path. To validate
your appliance booted properly run the following command:</p>

<pre><code># show interface eth1
</code></pre>

<p>If the reported MAC address is (null), then reboot the appliance and
check again. I will update this blog as soon as the bug is closed.</p>

<p>Now is time to see some traffic flowing between the machines: let&rsquo;s enable
LLDP on both ports, and we should be able to see both switches
identifying each other, and the traffic flowing thru Wireshark. Let&rsquo;s
issue the following commands on the CLI of both switches:</p>

<pre><code>switch# config
switch(config)# interface eth1
switch(config-if)# no shutdown
switch(config-if)# exit
switch(config)# lldp enable
switch(config)# exit
</code></pre>

<p>After these commands are entered on both switches, we can now show the
LLDP neighbor information on any of the switches:</p>

<pre><code>switch# show lldp neighbor-info eth1
Port                           : eth1
Neighbor entries               : 1
Neighbor entries deleted       : 0
Neighbor entries dropped       : 0
Neighbor entries age-out       : 0
Neighbor Chassis-Name          : switch
Neighbor Chassis-Description   : OpenSwitch 0.3.0 (dill) Linux 3.14.19-yocto-standard #1 SMP PREEMPT Wed Mar 23 00:06:21 UTC 2016 x86_64
Neighbor Chassis-ID            : a2:69:35:48:7b:4d
Neighbor Management-Address    : 
Chassis Capabilities Available : Bridge, Router
Chassis Capabilities Enabled   : Bridge, Router
Neighbor Port-ID               : eth1
TTL                            : 120
</code></pre>

<p>And you can see the LLDP advertisements going thru with Wireshark:</p>

<p><img class="center no-border" src="/images/wireshark.png"></p>

<h2>Conclusions And Next Steps</h2>

<p>That is all the fun that we will have for today, hope you find the
information useful. I&rsquo;m planing to blog soon about the following
subjects:</p>

<ul>
<li>A GNS3 setup of a CLOS network, and pushing the configuration using
Ansible (yay!).</li>
<li>Playing with an appliance using P4.</li>
</ul>


<p>Stay tuned!</p>
]]></content>
  </entry>
  
</feed>
