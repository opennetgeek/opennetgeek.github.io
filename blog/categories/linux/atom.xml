<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | The Open Network Geek Blog]]></title>
  <link href="http://opennetgeek.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://opennetgeek.github.io/"/>
  <updated>2016-05-18T20:28:32-06:00</updated>
  <id>http://opennetgeek.github.io/</id>
  <author>
    <name><![CDATA[Diego Dompe]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setting Up DC Fabric Simulation With OpenSwitch and GNS3]]></title>
    <link href="http://opennetgeek.github.io/blog/2016/05/05/setting-up-dc-fabric-simulation-with-openswitch-and-gns3/"/>
    <updated>2016-05-05T19:31:32-06:00</updated>
    <id>http://opennetgeek.github.io/blog/2016/05/05/setting-up-dc-fabric-simulation-with-openswitch-and-gns3</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/google-datacenter-tech-03.jpg"></p>

<p><strong>Note</strong>: This article was <a href="https://opennetgeek.wordpress.com/2016/05/05/setting-up-dc-fabric-simulation-with-openswitch-and-gns3/">originally published here</a>.</p>

<p>In the <a href="http://opennetgeek.github.io/blog/2016/04/20/using-openswitch-appliance-with-gns3/">previous
post</a> I
covered the basics about setting up the OpenSwitch Appliance using GNS3.
The setup was fairly simple: two switches connected to each other and
exchanging LLDP packets. In this post we will setup a more elaborate
network to simulate a DC fabric (although it may be a bit <a href="https://kontrolissues.net/2015/03/27/sometimes-size-matters-im-sorry-but-youre-just-not-big-enough/">overkill of a
setup</a>).
The setup will be the basis for the next posts about configuring this
fabric using Ansible.</p>

<p>One of the first questions when setting up a complex topology with GNS3
that most people will do is: how do I connect
it to the external world outside of the simulation? For VirtualBox
machines that we are using, the options are limited. The one I found to
work reliably across platforms was to use a NAT connection. This has the
disadvantage that we have limited connectivity from the external world
toward the internal network, but this could be also a security advantage
to prevent accidental propagation of control protocols from our
simulated environment.</p>

<p>Since the purpose of this lab is going to be to play with Ansible, we are
going to need a Linux machine to run it. So, we will setup the following network:</p>

<p><img class="center no-border" src="/images/mgmt1.png"></p>

<p>Let&rsquo;s elaborate on the setup details:</p>

<!--more-->


<ul>
<li>The &lsquo;Internet&rsquo; cloud is a GNS3&rsquo;s cloud element, that I configured
with a NAT entry that I named &lsquo;nat&rsquo;. The name doesn&rsquo;t really matter,
as GNS3 just need to see a NAT interface on the cloud element, so
that the connection to the VM called &lsquo;ubuntu-netlab&rsquo; is configured
using VirtualBox&rsquo;s NAT networking.</li>
<li>The &lsquo;ubuntu-netlab&rsquo; is a virtual machine that have Ubuntu 16.04
Server installed on it (instructions about this setup below). This
VM will have two NICs: one attached to the NAT connection
and another one to the SW1 that will be the management network of
the switches. What we will be doing with this machine? Several
things:

<ul>
<li>Run a DHCP server to provide IP connectivity to the management
network</li>
<li>Run a DNS relay to minimize disruptions on the configuration (I
may be roaming between home/office).</li>
<li>You may optionally configure IP masquerading (aka NAT) on this
box to allow the OpenSwitch boxes to reach the external world,
but is not really required.
<div class="callout border-callout">
You may be wondering why not connect the management switch
directly to the NAT port on the cloud element? I tried this, and
found the DHCP server shipping in VirtualBox was not really
good, and sometimes will assign the same IP address to different
boxes if restarted at a given time (bug with the leases?)
<b class="border-notch notch"></b>
<b class="notch"></b>
</div></li>
<li>We will install Ansible on this box, and use it as control
machine to configure the fabric</li>
</ul>
</li>
<li>The SW1 is a GNS3' ethernet switch with 8 ports. One will be
connected to the Ubuntu VM, and the other ports to each of the
management ports of the OpenSwitch boxes.</li>
<li>We will use 5 OpenSwitch boxes to create a simple datacenter fabric.
I&rsquo;m calling them spines/leaves for convenience, but I will do
examples with plain L2, and other L3 topologies that may not be a
CLOS.</li>
</ul>


<p>So, let&rsquo;s get started with the setup!</p>

<h2>Setup the Management Network</h2>

<p>You should start by dragging a cloud element and configuring it to have
a network interface of type NAT:</p>

<p><img class="center no-border" src="/images/cloud_nat.png"></p>

<p>Now we need to create the template for the Ubuntu VM that we will
connect to it.</p>

<h2>Configuring the GNS3 Template for the Ubuntu VM</h2>

<p>As I mention, we will be using an Ubuntu 16.04 (state of the art!)
Server VM. Don&rsquo;t worry, you won&rsquo;t have to install it. I have pre-package
it into a nice OVA (sorry tested only with VirtualBox, you may need to
do some work if want to use VMware). Download it from
<a href="https://archive.openswitch.net/demos/ubuntu-netlab.ova">here</a>.</p>

<h3>Importing the Image</h3>

<p>After downloading the OVA file, import it into VirtualBox, and then
proceed to create a template in GNS3 for the machine like we <a href="http://opennetgeek.github.io/blog/2016/04/20/using-openswitch-appliance-with-gns3/#install_and_configure">did for
OpenSwitch in the previous
post</a>.
Here is the summary of the steps and configuration:</p>

<ul>
<li>Preferences -> VirtualBox VMs -> New

<ul>
<li>Select the machine you just imported</li>
<li>☑︎ Use as linked base VM</li>
</ul>
</li>
<li>After created click on &lsquo;Edit&rsquo;

<ul>
<li>&lsquo;General settings&rsquo; tab:

<ul>
<li>Template Name: <em>ubuntu-netlab</em></li>
<li>Default name format: <em>{name}-{0}</em></li>
<li>Symbol: <em>:/symbols/vbox_guest.svg</em></li>
<li>Category: <em>End devices</em></li>
<li>RAM: <em>512 MB</em></li>
<li>☑︎ Enable remote console</li>
<li>☐ Enable ACPI shutdown</li>
<li>☑︎ Start VM in headless mode</li>
<li>☑︎ Use as a linked base VM</li>
</ul>
</li>
<li>&lsquo;Network&rsquo; tab:

<ul>
<li>Adapters: <em>2</em></li>
<li>First port name: <em>leave empty</em></li>
<li>Name format: <em>eth{0}</em></li>
<li>Segment size: 0</li>
<li>Type: <em>PCNet-FAST III (Am79c973)</em></li>
<li>☑︎ Allow GNS3 to use any configured VirtualBox adapter</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>Now you can drag an instance of it into your project and setup the
connections as detailed previously. This image is configured with serial
port console enabled, so after starting the VM, you can open the console
from GNS3 and get access. The default user/password is ubuntu/ubuntu.</p>

<div class="callout border-callout">
Be sure to connect this VM to the NAT interface of the cloud element
first, so that it gets a DHCP response, otherwise it will be blocked
during the boot process until it times out, and you won't see any output
on the serial console. If you have doubt your setup is working, you can
disable the 'headless' setting on the machine and look at the VGA
console of the box.
<b class="border-notch notch"></b>
<b class="notch"></b>
</div>


<h2>Setting up the Ubuntu VM</h2>

<h3>Initial Setup</h3>

<p>Now that you have access to the console, let&rsquo;s do some initial setup.
First you may want to tell the serial terminal the size so that the
output is not messed up. In my case I just sized my console window to
120 columns and 35 lines (I use the OS X Terminal app, and the tittle
usually says the dimensions):</p>

<pre><code>stty cols 120 rows 35
</code></pre>

<p>Next we want to install the latest software updates for this image:</p>

<div class="callout border-callout">
For the sake of simplicity I assume you are not behind a corporate
firewall, but if you do, you want to set the http_proxy and
http_proxy variables, and when invoking sudo, pass the -E parameter
to inherit these variables.
<b class="border-notch notch"></b>
<b class="notch"></b>
</div>


<pre><code>sudo apt update
sudo apt upgrade
</code></pre>

<h3>Network Setup</h3>

<p>Next, we want to configure the second network interface facing towards
SW1. You will have to run the ifconfig command to find the name of the
second interface:</p>

<pre><code>ifconfig -a
</code></pre>

<p>On this case my second interface is called enp0s8. I will then configure
the interface to an static IP address and bring the interface up:</p>

<pre><code>sudo su -
cat &lt;&lt;EOF &gt;&gt;/etc/network/interfaces

auto enp0s8
iface enp0s8 inet static
   address 192.168.1.1
   netmask 255.255.255.0

EOF
exit #leave sudo

sudo ifup enp0s8
</code></pre>

<h3>DHCP Server and DNS Relay</h3>

<p>Next we want to install the DHPC server and DNS relay (DNSmasq)</p>

<pre><code>sudo apt install isc-dhcp-server dnsmasq
</code></pre>

<p>Then proceed to configure the dhcp server modifying the file
<em>/etc/dhcp/dhcpd.conf</em> with your favorite editor (if you are not a <em>vim</em>
expert, the <em>nano</em> text editor could be easier). This are the contents
you will need:</p>

<pre><code>option domain-name "dc-lab";
option domain-name-servers 192.168.1.1;
subnet 192.168.1.0 netmask 255.255.255.0 {
  range 192.168.1.10 192.168.1.50;
  option routers 192.168.1.1;
}
</code></pre>

<p>Now you can start the server:</p>

<pre><code>systemctl start isc-dhcp-server
</code></pre>

<h3>IP Masquerading (NAT)</h3>

<p>If you want the OpenSwitch boxes to have access to the external
network over the management port, you may want to enable IP masquerading
on the box. Adjust the following script to the name of your network
interfaces:</p>

<pre><code>public_if=enp0s3
private_if=enp0s8
sudo -E iptables -t nat -A POSTROUTING -o $public_if -j MASQUERADE
sudo -E iptables -A FORWARD -i $public_if -o $private_if -m state --state RELATED,ESTABLISHED -j ACCEPT
sudo -E iptables -A FORWARD -i $private_if -o $public_if -j ACCEPT
sudo sysctl -w net.ipv4.ip_forward=1
</code></pre>

<h2>Setting up the Fabric Switches</h2>

<p>Now that we have the Cloud element and the Ubuntu VM, you need to drag
the GNS3 ethernet switch element to connect the second interface from
the Ubuntu VM with it, along with all the management ports of the
OpenSwitch instances. You can now proceed to power up the OpenSwitch
instances and login into their consoles (user/password is netop), and
verify the management interface got an IP address from our control VM:</p>

<pre><code>switch# show interface mgmt 
  Address Mode : dhcp
  IPv4 address/subnet-mask : 192.168.1.11/24
  Default gateway IPv4 : 192.168.1.1
  IPv6 address/prefix : 
  IPv6 link local address/prefix: fe80::a00:27ff:fe3a:efdd/64
  Default gateway IPv6 : 
  Primary Nameserver : 192.168.1.1
  Secondary Nameserver : 
switch#
</code></pre>

<div class="callout border-callout">
Unfortunately OpenSwitch Simulator still has the <a href="https://tree.taiga.io/project/openswitch/issue/840">bug I mentioned
previously</a> and sometimes it may fail during initialization. If you stumble with this,
just restart the VM.
<b class="border-notch notch"></b>
<b class="notch"></b>
</div>


<p>You may also test login with user root (no password) into a bash shell
and the networking of the management domain should be able to reach the
external network.</p>

<h2>Next Steps</h2>

<p>Now that we have a management network up an running, we want to
configure the fabric to move packets around. At this point most
networking engineers will log into the CLI and start configuring, but we
went thru all this setup of a management network to do something more
interesting&hellip;</p>

<p>In our next post we will do this instead using Ansible,
which is a pretty good tool for managing
<a href="http://www.theregister.co.uk/2013/03/18/servers_pets_or_cattle_cern/">cattle</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Developing OpenSwitch With Linux VM/OS X Host]]></title>
    <link href="http://opennetgeek.github.io/blog/2016/04/19/developing-openswitch-with-linux-vm-slash-os-x-host/"/>
    <updated>2016-04-19T14:58:23-06:00</updated>
    <id>http://opennetgeek.github.io/blog/2016/04/19/developing-openswitch-with-linux-vm-slash-os-x-host</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/ops-mac.jpg" title="&lsquo;OpenSwitch on Mac&rsquo; &lsquo;OpenSwitch on Mac&rsquo;" ></p>

<p><strong>Note</strong>: This article was <a href="https://opennetgeek.wordpress.com/2016/04/19/developing-openswitch-with-linux-vmos-x-host/">originally published here</a>.</p>

<p>One of the purposes when we designed the build system in OpenSwitch, was to make it possible to develop on as many environments as possible. If you have some background with developing networking firmware, the typical developer love to have this VM where everything works perfectly, but makes it impossible to work in your laptop at 30000 feet. This is not really a sin (as long as you can have the VM hosted in your machine), but the problem is that usually is some IT team on charge of the VMs setup, and the deployment is not handled by some automated/version-controlled code.</p>

<p>So for OpenSwitch, we aimed to at least document the requirements and steps for manual setup of your environment. You can read <a href="http://www.openswitch.net/documents/dev/linux-setup">this page</a> to get your Linux machine to ready it for OpenSwitch development.</p>

<p>So, why to write an article about my particular setup? Well, I&rsquo;m a Mac user, so in this article I&rsquo;m going to detail my setup using a OS X host with a Linux VM. This provides some nice tricks that makes your workflow easier if you are using a similar setup. I will also explain the rationale of the setup.</p>

<p>My use of Linux VM for development is mostly thru the Linux CLI and I use NFS to share files between my Mac and Linux. This allows me to use any graphical tool from the Linux VM if I have to, but also to use tools from the host without major hurdles.Read more&hellip;</p>

<h2>Setup the VM</h2>

<!--more-->


<p>The first step is that I will use <a href="https://www.virtualbox.org/">VirtualBox</a> to deploy my Linux VM. You can use any software that you want, but VirtualBox is free and available to any developer, so it&rsquo;s a good target.</p>

<p>Since I&rsquo;m using a Macbook Pro Retina with a i7, I will use the following setup:</p>

<ul>
<li>6 Cores: the Yocto build system can take advantage of the multicore environment, so the more cores, the faster builds. This leaves 2 cores idle for my Mac, so performance doesn&rsquo;t suffer.</li>
<li>4Gb of RAM: A full from-scratch build of the compiler (rare, since we use Yocto&rsquo;s shared states) can consume quite a bit of RAM.</li>
<li>20GB of disk: the build directories from Yocto could be big, averaging 6G each, but the figure could easily go up depending on what you are doing. So having some disk space to spare is a good measure (I personally ran with 160GB)</li>
<li>Two network interfaces:

<ul>
<li>First one will be NAT, so that I can reach the internet independent of the network connection on my Mac (sometimes I use wireless, sometimes I use a thunderbolt dock station).</li>
<li>Second one will be host-only adapter, this provides a internal network so that we can easily communicate between the VM and the host. Using multicast DNS (aka Bonjour), we won' even have to worry about IP addresses on this network.</li>
</ul>
</li>
</ul>


<p>For this VM, I will be using <a href="http://mirror.uoregon.edu/ubuntu-releases/14.04.4/ubuntu-14.04.4-server-amd64.iso">Ubuntu LTS 14.04 Server ISO</a>. Right now OpenSwitch works best with this version of Ubuntu (and provides faster build times). We hope to update to the new LTS soon and once we do, I will update this post to reflect that. <strong>Update</strong>: I have added comments about how to make it work with <a href="http://releases.ubuntu.com/16.04/ubuntu-16.04-server-amd64.iso">Ubuntu 16.04</a>!.</p>

<p>I&rsquo;m assuming you are familiar with installing an Ubuntu ISO into a VM and will omit those details. The only important detail from the installation would be to install the SSH server. I would recommend that you setup your user account with the same user id that you have in GitHub (this is a good moment to create one, if you don&rsquo;t). Using the same user account makes life easier with gerrit, but is not an strict requirement.</p>

<h2>Proxy Setup</h2>

<p>If you are behind a corporate firewall, be sure to setup your corporate proxies in your user environment:</p>

<pre><code>cat &lt;&lt;EOF &gt;&gt;~/.profile
export http_proxy=http://your.proxy.com:port
export https_proxy=http://your.proxy.com:port
EOF
source ~/.profile
</code></pre>

<p>If my case, I may be roaming between the office and home, so sometimes I don&rsquo;t use a proxy, in which case I find easy to unset the variables and be able to work. So, I don&rsquo;t like to wire the apt configuration with the proxy as <a href="http://askubuntu.com/questions/257290/configure-proxy-for-apt">explained here</a>, instead I like to run the apt-get command with &lsquo;sudo -E&rsquo; parameter so that it inherits my environment variables and uses the proxy if I have it defined.</p>

<h2>Initial Setup</h2>

<p>First, I usually disable asking password for my user:</p>

<pre><code>sudo visudo -f /etc/sudoers.d/passwordless-user
</code></pre>

<p>Then enter a line like the following (replace your username):</p>

<pre><code>username ALL=(ALL) NOPASSWD:ALL
</code></pre>

<p>Next, let&rsquo;s update the apt package cache:</p>

<pre><code>sudo apt-get update
</code></pre>

<h2>Networking Setup</h2>

<p>The initial installation will configure the machine out of the box to have DHCP on the first network interface, so we will need to add the second interface for automatic startup. So I will add the following lines to /etc/network/interfaces:</p>

<pre><code>auto eth1
iface eth1 inet dhcp
</code></pre>

<p>Then, bring the interface up:</p>

<pre><code>sudo ifup eth1
</code></pre>

<p><strong>Update</strong>: if you are using 16.04, the network interfaces have different names (to understand why and revert it if you want, take a look here). Run &lsquo;ifconfig -a&rsquo; to find the name of your interfaces.</p>

<p>Next, proceed to install some extra packages and configurations that make networking work better.</p>

<p>dnsmasq: the build system fetches constantly from the servers in order to use the shared states to speed the build. So using a local DNS cache will help reduce the pressure on your DNS (and may save you from raising flags about the high rate of request your machine will be doing).</p>

<pre><code>sudo apt-get install dnsmasq
</code></pre>

<p><strong>Update</strong>: if you are using 16.04, dnsmasq won&rsquo;t work out of the box since it conflicts with the dnsmasq used by the LXC container daemon. I worked around by disabling LXC (but maybe that solution doesn&rsquo;t work for you):</p>

<pre><code>sudo systemctl stop lxc lxc-net
sudo systemctl disable lxc lxc-net
</code></pre>

<p>nss-mdns: this is the name service resolution to use multicast DNS. This allows the Linux machine to resolve (and as side effect of dependencies, advertise) .local addresses and makes communication with the Mac simpler.</p>

<pre><code>sudo apt-get install libnss-mdns
</code></pre>

<p>After this is installed, you should be able to reach your machine with the .local name. Lets say your Linux machine is named linuxvm, then you should be able to run from your Mac:</p>

<pre><code>ping linuxvm.local
</code></pre>

<h2>Headless VM</h2>

<p>After the initial networking setup is ready, I like to run the VM in headless mode from the OS X terminal. To do that, I shutdown the VM from the VirtualBox UI and close the application. Then from an OS X Terminal I can start the VM in the background with (replace the LinuxVM name with the name of your VM:</p>

<pre><code>VBoxHeadless --startvm LinuxVM --vrde off &amp;
</code></pre>

<p>This will run on the background and as long as you don&rsquo;t close the terminal, the VM will run. Next, I usually connect to the VM from the terminal with (using the mDNS .local resolution):</p>

<pre><code>ssh -Y username@linuxvm.local
</code></pre>

<p>The -Y automatically exports X11 apps into my Mac XQuartz, in case you want to use some graphical program from Linux.</p>

<h2>OpenSwitch Development Environment Tweaks</h2>

<p>Create a workspace directory on /ws. This is just an standard I follow  of putting all my work on a separate directory. Makes easier to fine-control the NFS exports from my Linux machine into my Mac host.</p>

<pre><code>sudo mkdir /ws
sudo chown $USER /ws
</code></pre>

<h3>NFS Server Share Setup</h3>

<p>Installing an NFS server with the proper parameters to allow easy sharing of files between the host an the Mac took me several hours of research. Here is the recipe for it.</p>

<p>Install the NFS server daemon:</p>

<pre><code>sudo apt-get install nfs-kernel-server
</code></pre>

<p>Configure the /etc/exports file with the following line to allow your Mac host to access the files under /ws with the same user permissions as your Linux user (assuming your user ID is 1000, you can find that with the &lsquo;id&rsquo; command).</p>

<pre><code>/ws 192.168.56.1(rw,all_squash,anonuid=1000,anongid=1000,sync,no_subtree_check,insecure)
</code></pre>

<p>Start the NFS server:</p>

<pre><code>sudo service nfs-kernel-server start
</code></pre>

<p><strong>Update</strong>: if you are using 16.04 use systemctl instead of service, and the service is called nfs-server:</p>

<pre><code>sudo systemctl start nfs-server
</code></pre>

<p>At this point you should be able to mount the NFS directory from your Mac, by going to the Finder Menu Go  -> Connect to Server&hellip; (or using the ⌘k shortcut). On the server address box enter:</p>

<pre><code>nfs://yourmachine.local/ws
</code></pre>

<p>That should get your Mac access over NFS to the directory  /ws and will have the right permission mapping so that files could be changed either from the Linux or Mac environment without permissions conflicts.</p>

<h3>Install Docker</h3>

<p>We are going to be using docker, so we need to install it following the instructions <a href="https://docs.docker.com/engine/installation/linux/ubuntulinux/">here</a>.</p>

<p>If you are using a proxy, you need to setup it up for the docker daemon on /etc/default/docker:</p>

<pre><code>export http_proxy=http://your.proxy.com:port
export https_proxy=http://your.proxy.com:port
</code></pre>

<p>Then, restart your docker to make the changes take effect:</p>

<pre><code>sudo service docker restart
</code></pre>

<h3>Prepare for  OpenSwitch Build Environment</h3>

<p>Install the minimal required packages for OpenSwitch development:</p>

<pre><code>sudo apt-get install gawk wget git-core diffstat unzip texinfo gcc-multilib build-essential chrpath screen curl device-tree-compiler git-review
</code></pre>

<p>OpenSwitch leverages Yocto&rsquo;s shared-state system, so we want to have a global shared state directory that is shared across all the development environments to speed build time. The OpenSwitch build system will get this information automatically from a variable environment, so I will put it on my profile by default:</p>

<pre><code>sudo mkdir /ws/openswitch-sstate-cache /ws/openswitch-downloads
sudo chown $USER /ws/openswitch-sstate-cache /ws/openswitch-downloads
echo -e "export SSTATE_DIR=/ws/openswitch-sstate-cache\nexport DL_DIR=/ws/openswitch-downloads" &gt;&gt; ~/.profile
source ~/.profile
</code></pre>

<h2>Git And Gerrit Setup</h2>

<p>Setup some initial git setup for working with <a href="https://review.openswitch.net/">OpenSwitch Gerrit</a>. You will need a GitHub account in order to login into gerrit, so I will assume you already have one, and you know how to upload your ssh key into gerrit. You will also need to sign a <a href="http://elinux.org/Developer_Certificate_Of_Origin">DCO</a> when signing for Gerrit, otherwise won&rsquo;t be able to upload code for review (if you are going to contribute as part of your job, you need to follow the steps on the OpenSwitch page to get your employer to sing a corporate contribution agreement).</p>

<p>First, setup git (I like to use colors, and use st as an alias for status):</p>

<pre><code>git config --global user.name "John Doe"
git config --global user.email johndoe@example.com
git config --global alias.st status
git config --global color.ui auto
</code></pre>

<p>If you are working behind a corporate firewall, it may be that gerrit ports (29418) are blocked. You can test a telnet connection into the port to confirm if you are blocked. A workaround this restriction is to install socat and use a proxy for the ssh connection:</p>

<pre><code>sudo apt-get install socat
cat &lt;&lt;EOF &gt;&gt;~/.ssh/config
Host review.openswitch.net
    IdentityFile ~/.ssh/id_rsa
    ProxyCommand socat - PROXY:your.proxy.com:%h:%p,proxyport=&lt;port&gt;
EOF
</code></pre>

<p>If your github username is different from the username in your machine, you may want to configure git to use the right username when doing git reviews:</p>

<pre><code>git config --global gitreview.username &lt;username&gt;
</code></pre>

<p>You can verify your connection to gerrit works by issuing this command and getting a similar output:</p>

<pre><code>ssh -p 29418 &lt;username&gt;@review.openswitch.net
  ****    Welcome to Gerrit Code Review    ****

  Hi John Doe, you have successfully connected over SSH.

  Unfortunately, interactive shells are disabled.

  To clone a hosted Git repository, use:

  git clone ssh://&lt;username&gt;@review.openswitch.net:29418/REPOSITORY_NAME.git

Connection to review.openswitch.net closed.
</code></pre>

<h2>Building OpenSwitch</h2>

<p>Finally, I&rsquo;m going to clone the OpenSwitch build system, and build an appliance image that I would use in my next post about working OpenSwitch with GNS3.</p>

<p>First I clone the build system:</p>

<pre><code>git clone https://git.openswitch.net/openswitch/ops-build ops-appliance
cd ops-appliance
make configure appliance
make
</code></pre>

<p>Now you can sit a wait for the build to complete. If you have a fast internet connection it will take in the order of 15 minutes to download all the caches and sources to build a full OpenSwitch Virtual Appliance. In  my next post we will be using that.</p>

<h2>Conclusion</h2>

<p>I hope the information is useful. Drop me a comment if you think there is any improvement I can do to the environment.</p>
]]></content>
  </entry>
  
</feed>
